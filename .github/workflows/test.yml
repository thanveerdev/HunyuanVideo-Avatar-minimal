name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  MODEL_BASE: ./weights
  PYTHONPATH: .
  CUDA_VISIBLE_DEVICES: 0

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
    
    - name: Run Black
      run: black --check --diff .
    
    - name: Run isort
      run: isort --check-only --diff .
    
    - name: Run flake8
      run: flake8 hymm_sp tests --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy
      run: mypy hymm_sp --ignore-missing-imports
    
    - name: Run bandit security check
      run: bandit -r hymm_sp -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        pytorch-version: ['2.0.0', '2.1.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ matrix.pytorch-version }} --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements-minimal.txt
        pip install -r test-requirements.txt
    
    - name: Create weights directory
      run: |
        mkdir -p weights
        echo "# Model weights go here" > weights/README.md
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v \
          --cov=hymm_sp \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results-unit.xml \
          --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-unit-${{ matrix.python-version }}-${{ matrix.pytorch-version }}
        path: |
          test-results-unit.xml
          htmlcov/
          coverage.xml

  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements-minimal.txt
        pip install -r test-requirements.txt
    
         - name: Create test environment
       run: |
         mkdir -p weights assets/image assets/audio outputs
         echo "# Model weights" > weights/README.md
         # Create dummy test files
         python -c "
         import numpy as np
         from PIL import Image
         import soundfile as sf
         
         # Create dummy image
         img = Image.fromarray(np.random.randint(0, 255, (256, 256, 3), dtype=np.uint8))
         img.save('assets/image/test.png')
         
         # Create dummy audio
         audio = np.sin(2 * np.pi * 440 * np.linspace(0, 1, 16000))
         sf.write('assets/audio/test.wav', audio, 16000)
         "
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v \
          --junit-xml=test-results-integration.xml \
          --tb=short \
          -m "not slow"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-integration
        path: test-results-integration.xml

  test-system:
    runs-on: ubuntu-latest
    needs: test-integration
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements-minimal.txt
        pip install -r test-requirements.txt
    
    - name: Run system tests
      run: |
        pytest tests/system/ -v \
          --junit-xml=test-results-system.xml \
          --tb=short \
          -m "not docker and not gpu"
    
    - name: Upload system test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-system
        path: test-results-system.xml

  test-docker:
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t hunyuan-avatar-test .
        else
          echo "Dockerfile not found, skipping Docker tests"
          exit 0
        fi
    
    - name: Test Docker image
      run: |
        if docker images | grep -q hunyuan-avatar-test; then
          # Test that container can start
          docker run --rm hunyuan-avatar-test python --version
        else
          echo "Docker image not built, skipping tests"
        fi
    
    - name: Run Docker system tests
      run: |
        python -m pip install --upgrade pip
        pip install -r test-requirements.txt
        pytest tests/system/test_docker_integration.py -v \
          --junit-xml=test-results-docker.xml \
          --tb=short \
          -m docker
    
    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-docker
        path: test-results-docker.xml

  test-performance:
    runs-on: ubuntu-latest
    needs: test-integration
    if: github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements-minimal.txt
        pip install -r test-requirements.txt
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v \
          --benchmark-json=benchmark-results.json \
          --junit-xml=test-results-performance.xml \
          --tb=short \
          -m "benchmark and not gpu"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          benchmark-results.json
          test-results-performance.xml

  test-gpu:
    runs-on: self-hosted  # Requires self-hosted runner with GPU
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Check GPU availability
      run: |
        nvidia-smi || echo "GPU not available"
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install -r requirements-minimal.txt
        pip install -r test-requirements.txt
    
    - name: Run GPU tests
      run: |
        pytest tests/ -v \
          --junit-xml=test-results-gpu.xml \
          --tb=short \
          -m gpu \
          --maxfail=5
    
    - name: Upload GPU test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-gpu
        path: test-results-gpu.xml

  test-report:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-system, test-docker]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/test-results-*.xml
        check_name: "Test Results"
        comment_title: "Test Results"
    
    - name: Create test summary
      if: always()
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| System Tests | ${{ needs.test-system.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Tests | ${{ needs.test-docker.result }} |" >> $GITHUB_STEP_SUMMARY 